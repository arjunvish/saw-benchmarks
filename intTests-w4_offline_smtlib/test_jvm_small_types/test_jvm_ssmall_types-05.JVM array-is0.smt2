(set-option :produce-models true)
; :1:0
(declare-fun x1 () Bool)
(define-fun x!0 () (_ BitVec 32) (ite x1 (_ bv1 32) (_ bv0 32)))
(define-fun x!1 () (_ BitVec 8) ((_ extract 7 0) x!0))
(define-fun x!2 () Bool (= (_ bv0 8) x!1))
(define-fun x!3 () (_ BitVec 1) (ite x!2 (_ bv0 1) (_ bv1 1)))
(declare-fun x0 () (_ BitVec 4))
(define-fun x!4 () Bool (= ((_ extract 2 2) x0) (_ bv1 1)))
(define-fun x!5 () (_ BitVec 1) (ite x!4 (_ bv1 1) (_ bv0 1)))
(define-fun x!6 () (_ BitVec 2) (concat x!3 x!5))
(define-fun x!7 () Bool (= ((_ extract 1 1) x0) (_ bv1 1)))
(define-fun x!8 () (_ BitVec 1) (ite x!7 (_ bv1 1) (_ bv0 1)))
(define-fun x!9 () (_ BitVec 3) (concat x!6 x!8))
(define-fun x!10 () Bool (= ((_ extract 0 0) x0) (_ bv1 1)))
(define-fun x!11 () (_ BitVec 1) (ite x!10 (_ bv1 1) (_ bv0 1)))
(define-fun x!12 () (_ BitVec 4) (concat x!9 x!11))
(define-fun x!13 () (_ BitVec 1) (ite x1 (_ bv1 1) (_ bv0 1)))
(define-fun x!14 () Bool (= ((_ extract 2 2) x0) (_ bv1 1)))
(define-fun x!15 () (_ BitVec 1) (ite x!14 (_ bv1 1) (_ bv0 1)))
(define-fun x!16 () (_ BitVec 2) (concat x!13 x!15))
(define-fun x!17 () Bool (= ((_ extract 1 1) x0) (_ bv1 1)))
(define-fun x!18 () (_ BitVec 1) (ite x!17 (_ bv1 1) (_ bv0 1)))
(define-fun x!19 () (_ BitVec 3) (concat x!16 x!18))
(define-fun x!20 () Bool (= ((_ extract 0 0) x0) (_ bv1 1)))
(define-fun x!21 () (_ BitVec 1) (ite x!20 (_ bv1 1) (_ bv0 1)))
(define-fun x!22 () (_ BitVec 4) (concat x!19 x!21))
(define-fun x!23 () Bool (= x!12 x!22))
(define-fun x!24 () Bool (not x!23))
(assert x!24)
(check-sat)
(exit)
